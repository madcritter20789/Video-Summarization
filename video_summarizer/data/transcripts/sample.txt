 What tools do I use for 2D and 3D art, the sound, the coding and all things game that? Which tools should you pick for the next game? It all comes down to the idea of slowing down to go faster. Let's start with 2D art. So first things first, let's talk about Asaprite. Some folks swear by it, but in my humble opinion, this software is overrated. Why? Well, if you head over to places like Pixel Joint and check out some of the most jaw-dropping pixel art out there, you're gonna find out that Asaprite isn't the tool they're using to make those pixel art. The main issue I have with Asaprite is that it forces you to draw every single pixel. And believe it or not, that's not the go-to technique used by top tier pixel artists. And I know it may sound counterintuitive because pixel art is all about drawing pixels, right? But this is one of those well-capped secrets in the word of pixel art. We can delve deeper into it another time. But just to demonstrate what I mean by this, this is how pixel art can be done outside of Asaprite. I've set a color palette with some filters and I'm just going to do one click with my mouse. One click with my mouse. This is the result of one click. And now let's add some cracks here. I'm gonna take the brush tool and the pencil tool and then yeah, let's tweak this sphere so it seems like it's made of a different material. I would love to see how long it would take to achieve this sort of result with Asaprite. Sure, Asaprite is very easy to use and the alternative that I'm going to talk here might take a bit more time to master, but remember what we said. Slow down to go faster. Although the idea of learning a new software may seem intimidating, it can ultimately help you work faster and produce higher quality results. Now, when it comes to 2D art, it's hard to beat the versatility of Photoshop. I've used Photoshop in the past, it's a great software, but I don't use it anymore. I don't use it anymore. Photoshop. It's like the Swiss Army knife of art software. You can create all sorts of art styles with that. In fact, many of the best pixel artists actually use Photoshop for their craft. The main catch is that it's on the pricey side. Currently I got two trusted tools that I use for 2D art. First, I have photopia. It is a remarkable alternative to Photoshop and I can't emphasize this enough. It is fantastic. Having used Photoshop for years, I can confidently say that photopia offers almost all the features you would find in Photoshop. You can dabble in various art styles and play around with layers, blending out genres, filters, you name it. Even if you're into pixel art, you can restrict yourself to a palette and photopia got your back. And best of all, it costs zero US dollars to use. Next up, we have Crita. Now it might be a bit lower in heavier in the system when you're tinkering with filters, politicization, blending, if we compare it to Photoshop or photopia, but it's still a stellar software. Personally, I use Crita for drawing and illustration, especially when I'm using a drawing tablet. It's brush controls are very good. It is also possible to do animations in Crita. It has nifty features such as onion skin so that you can see other frames while you're drawing a new frame. Crita can also be used for pixel art, there's a lot you can do with filters and politicization and so on. It is 20% more expensive than photopia, which means that you can get it for zero dollars as well. I use Crita for drawing and illustrations using a drawing tablet and when it's time for mouse based image editing, I bring my art to photopia and it's the most of the work there. Now what do I use for design docs, project management and overall organization? Google docs, Google sheets and Google slide. I admit, these tools have no aesthetic appeal, actually they are ugly, but they more than make up for it in functionality. When you're on the go and an idea strikes, you can write it down from anywhere using your phone, then you can share, collaborate, annotate everything with versioning of what changed and when, so very simple and effective. Then we have version control. I use git and git tab and for me this is a must. Trust me, manually saving multiple versions of our project for every risk tweak you make will lead to headaches in the long run. Git may seem complicated if you are new to it, but I believe investing some time to learn it well will pay off big time down the road. Remember, slow down to go faster. Before we dive into the 3d tools, I got something to share with you. The third code of my game gen winning game. I've decided to make the construct project available to you. You will get behind the scenes look on how the game was set up, how marks the AI work, all the levels, all the assets and the needy greedy details on how the game works. I'm creating a million list for the folks who are interested in game development and want to follow my journey as I bring this game to steam and I want you to be a part of it. That's why I'm offering you the actual search project, complete with the assets to open up the project, run it and even modify it if you want. Sign up in the list below and I will personally send you the search code of awful marker rows, plus you will see how user friendly the game engine I use is. You will be able to open the project without installing any software. Alright, now let's shift our focus to 3d art tools. It has been a while since I deep my toes into 3d game development. I've made some 3d assets of the game you are seeing on the screen right now. This is a game from 2008 and it was supposed to be a VR game before Oculus Rift was a thing. And as you can guess, this game never saw the light of day. While I can't say I was particularly good at 3d art back then, I'm eager to jump back in. Currently I'm experimenting with 3d art and my next game you likely incorporate some form of stylized 3d. First up, we have blockbench for modeling. This tool can simplify the workflow for a specific style of art. I highly recommend checking out the videos made by Brandon Jenner's Greer on the subject. The models created with blockbench have a distinct aesthetic that in my opinion fits perfectly with the kind of games that indie devs can create. As I mentioned in my previous video, I wouldn't advise indie or solo devs to chase after high fidelity graphics. Instead opting for a distinctive stylized 3d style could be your best bet. Now even though I'm leaning towards blockbench for 3d modeling, Blender remains the undisputable champion for rigging, exporting and editing all things 3d. So there's no way around Blender if you need 3d assets. Blender is basically an essential part of 83d artist toolkit, unless you have very deep pockets of course. So distinctive stylized 3d look is the strategy that I chose as solo developer. And while blockbench may be my modeling tool of choice, I'm doubtfully have to use Blender alongside it. For audio, I don't have much to say. When it comes to mixing and fine tuning sound effects and music tracks, I use audacity, and I'm guessing most of you are already familiar with audacity. For music, I dabbed into some digital audio workstation software in the past. However, I'm not planning on writing my own music at the moment, and instead I'm using asset packs, royalty free music, and from time to time, tuning up with folks that make music. Game Engine. I've dedicated an entire video to discuss my game engine of choice. But here is a condense version. Construct 3 takes all the boxes for a 2D game development. Also, it boasts some basic 3d features, and most importantly, it makes me very productive. Plus, it's pretty decent for creating cross-platform games. Programming language. When it comes to coding, TypeScript is a programming language I really like. Plus, I use it in my daily work. It is great not to have to context switch between programming language when I'm working on games, versus when I'm working in my daily job. I've dealt deeper into this topic in my previous video, explaining why I prefer TypeScript over GD script and GML, so check out the video for more details on that. The code editor that I use is VS Code. Construct 3 has this feature that exports all the type definitions and the TS config of your project in such a way that you can very easily use it in VS Code to edit your code using AutoComplete, for example. If you don't know, VS Code is much lighter than its custom visual studio, and it has many extensions that you can use to customize the editor and improve your workload. VS Code also plays nicely with Git. While I personally prefer using Git via the command line, those who are getting started can have a much easier time using it directly inside VS Code. And once again, if you are interested in following my journey, bringing an instant version of Offal Marco Bros to Steam, and also getting access to the Project SerrS Code, you can sign up for the mailing list, the links in the description. And for those of you curious to see this tools in action, stay tuned for my next video. See you next time.